exit
all_frequency
exit
wanted_activities.inject{|zero, activity| activity.activity_stat.exertion}
zero = 0
wanted_activities.inject{|0, activity| activity.activity_stat.exertion}
wanted_activities.first.activity_stat.exertion
wanted_activities.first.activity_stat
wanted_activities.inject{|activity| activity.activity_stat.exertion}
wanted_activities
continue
exertion_series
continue
exertion_series
continue
exertion_series
n
exertion_series
area_series
n
continue
wanted_activities.length
wanted_activities
exit
wanted_activities
exit
summary_hash
params
exit
newParam
newParam = params[:movement_type].chomp('\"')
newParam = params[:movement_type].remove('\"')
params[:movement_type].slice! '\"'
params[:movement_type].chomp('\"')
params[:movement_type]
params[:movement_type].chomp("\")
params[:movement_type].chomp("\"
params[:movement_type].chomp('"').chomp("\")
params[:movement_type].chomp('"').chomp('/').chomp('\')
params[:movement_type].chomp('"', '/', '\')
params[:movement_type].chomp('"').chomp('/')
params[:movement_type].chomp('"')
params[:movement_type].to_s
CGI.parse(params)
CGI.parse(params[:movement_type])
params[:movement_type]
params
filtered_movements
summary_hash
exit
(23/13).to_f
(23 / 13).round(1)
23 / 13
movements_per_session.inject(:+) 
movements_per_session
sessions.length
sessions
exit 
attempt = filtered_by_year_activities.joins(:activity_stat).merge(ActivityStat.order(time_seconds: :desc)).first.movement_type.movement_type
attempt = filtered_by_year_activities.joins(:activity_stat).merge(ActivityStat.order(time_seconds: :desc)).first.movement_type
attempt = filtered_by_year_activities.joins(:activity_stat).merge(ActivityStat.order(time_seconds: :desc)).first
attempt
activity = filtered_by_year_activities.joins(:activity_stat).merge(Activity_stat.order(time_seconds: :desc)).first
attempt = filtered_by_year_activities.joins(activity_stat).merge(Activity_stat.order(time_seconds: :desc)).first
filtered_by_year_activities
exit
activities
end_year
begin_year
date_time
exit
activity
activity = Activity.where(user_id: 4)
activity
activity = Activity.where(user_id: user.id)
Activity.where(user_id: 4)
Activity.first
user.id
Activity.find(:all, :conditions => {:user_id => user.id})
Acitivity.find(:all, :conditions => {:user_id => user.id})
Activity.where(user_id: 2)
activities = Activity.find(:all, :conditions => {:user_id => user.id})
exit
user
exit
movement_sessions.length
movement_sessions.all
movement_sessions
exit
continue
render json: activity, serializer: ActivityWithStatsSerializer, status: :created
ActivityStat.create!(all_activity_stat_params)
all_activity_stat_params = activity_stat_params.merge!(activity_id: activity.id)
activity = Activity.create!(all_activity_params)
exit
activity = Activity.create!(all_activity_params)
all_activity_params
exit
activity << ActivityStat.create!(activity_stat_params)
activity.add_stats(activity_stat_params)
activity_stat_params
activity
rails c
rails x
exit
almost_activity_params
almost_activity_params = activity_params.merge!(movement_session_id: movement_session_id, movement_type_id: movement_type_id)
vement_session_id: movement_session_id, movement_type_id: movement_type_id)
exit
activity_params.merge!(movement_session_id: moexit
activity_params
almost_activity_params = activity_params.merge![momvement_session_id: movement_session_id]
movement_type_id
exit
movement_type_id
movementtype_id
exit
movement_type
exit
movement_session.id
movement_session
exit
passed_params
exit
params
exit
params
exit
xit
sorted_arr
exit
sorted_arr
sort_arr
exit
xit
value.sort{|a, b| a.downcase <=> b.downcase}
value
sorted_arr
continue
value.sort{|a, b| a.downcase <=> b.downcase}
value
exit
mapped_movement_types
value
exit
value.sort
value
continue
enter
!
value.sort
value
exit
category.parameterize.underscore.to_sym
category.parameterize.underscore.to_symbol
category.parameterize.underscore
category.parameterize
category
ategory
exit
category_symbol = movement[:movement_type_category].parameterize.underscore.to_sym
movement
exit
category_hash
category_hash[category_symbol] << movement.movement_type
movement.movement_type
category_hash[category_symbol]
category_symbol = movement.movement_type_category.parameterize.underscore.to_sym
category_hash[category_symbol]
category_hash
exit
categories
categories[:footsports]
categories[category_symbol]
category_symbol = movement.movement_type_category.parameterize.underscore.to_sym
categories
exit
categories
categories[category_symbol]
category_symbol
category_symbol = movement.movement_type_category.parameterize.underscore.to_sym
exit
session
exit
cookies
